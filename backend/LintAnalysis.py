from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import subprocess
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for cross-origin requests

# Define the path to the Android Lint executable
LINT_EXECUTABLE_PATH = '/home/n00b/Downloads/cmdline-tools/bin/lint'
REPORTS_DIR = os.path.join(os.getcwd(), 'reports')

# Ensure the reports directory exists
os.makedirs(REPORTS_DIR, exist_ok=True)

def run_lint_command(command_args):
    try:
        # Run the lint command
        result = subprocess.run(command_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # If the command fails, return the error message
        if result.returncode != 0:
            return {'error': result.stderr}, 500
        
        # Read the HTML report file generated by lint
        report_path = command_args[-1]  # Assuming the last argument is the report path
        if os.path.exists(report_path):
            with open(report_path, 'r') as file:
                report = file.read()
            return report, 200, {'Content-Type': 'text/html'}  # Return HTML content properly
        else:
            return {'error': 'Report file not found'}, 500
    except Exception as e:
        return {'error': str(e)}, 500

@app.route('/run-lint', methods=['POST'])
def run_lint():
    data = request.get_json()
    path = data.get('path')
    analysis_type = data.get('analysisType')

    if not path or not os.path.exists(path):
        return jsonify({'error': 'Invalid or nonexistent path provided'}), 400

    report_path = '/home/n00b/Desktop/android_static_analysis_framework/backend/reports/lint-report.html'

    # Modify the lint command based on the analysis type
    if analysis_type == 'basic':
        lint_command = [LINT_EXECUTABLE_PATH, '--html', report_path, path]
    elif analysis_type == 'docs':
        lint_command = [LINT_EXECUTABLE_PATH, '--generate-docs', '--output', path]
    elif analysis_type == 'errors':
        lint_command = [LINT_EXECUTABLE_PATH, '--html', report_path, '--severity', 'error', path]
    elif analysis_type == 'fatal':
        lint_command = [LINT_EXECUTABLE_PATH, '--html', report_path, '--severity', 'fatal', path]
    elif analysis_type == 'baseline':
        lint_command = [LINT_EXECUTABLE_PATH, '--baseline', 'baseline.xml', '--html', report_path, path]
    elif analysis_type == 'config':
        lint_command = [LINT_EXECUTABLE_PATH, '--config', 'lint.xml', '--html', report_path, path]
    else:
        return jsonify({'error': 'Invalid analysis type'}), 400

    return jsonify(run_lint_command(lint_command))

# Add endpoint to serve static reports
@app.route('/reports/<path:filename>')
def serve_report(filename):
    return send_from_directory(REPORTS_DIR, filename)

if __name__ == '__main__':
    app.run(debug=True, host='127.0.0.1', port=5000)
